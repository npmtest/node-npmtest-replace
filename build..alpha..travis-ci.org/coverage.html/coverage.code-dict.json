{"/home/travis/build/npmtest/node-npmtest-replace/test.js":"/* istanbul instrument in package npmtest_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replace/lib.npmtest_replace.js":"/* istanbul instrument in package npmtest_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_replace = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_replace = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-replace/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-replace && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_replace */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_replace\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_replace.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_replace.rollup.js'] =\n            local.assetsDict['/assets.npmtest_replace.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_replace.__dirname +\n                    '/lib.npmtest_replace.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replace/node_modules/replace/replace.js":"var fs = require(\"fs\"),\n    path = require(\"path\"),\n    colors = require(\"colors\"),\n    minimatch = require(\"minimatch\"),\n    sharedOptions = require(\"./bin/shared-options\");\n\nmodule.exports = function(options) {\n    // If the path is the same as the default and the recursive option was not\n    // specified, search recursively under the current directory as a\n    // convenience.\n    if (options.paths.length === 1 &&\n        options.paths[0] === sharedOptions.paths.default[0] &&\n        !options.hasOwnProperty('recursive')) {\n        options.paths = ['.'];\n        options.recursive = true;\n    }\n\n    var lineCount = 0,\n        limit = 400; // chars per line\n\n    if (!options.color) {\n        options.color = \"cyan\";\n    }\n\n    var flags = \"g\"; // global multiline\n    if (options.ignoreCase) {\n        flags += \"i\";\n    }\n    if (options.multiline) {\n        flags += \"m\";\n    }\n\n    var regex;\n    if (options.regex instanceof RegExp) {\n        regex = options.regex;\n    }\n    else {\n        regex = new RegExp(options.regex, flags);\n    }\n    var canReplace = !options.preview && options.replacement !== undefined;\n\n    var includes;\n    if (options.include) {\n        includes = options.include.split(\",\");\n    }\n    var excludes = [];\n    if (options.exclude) {\n        excludes = options.exclude.split(\",\");\n    }\n    var ignoreFile = options.excludeList || path.join(__dirname, '/defaultignore');\n    var ignores = fs.readFileSync(ignoreFile, \"utf-8\").split(\"\\n\");\n    excludes = excludes.concat(ignores);\n\n    var replaceFunc;\n    if (options.funcFile) {\n        eval('replaceFunc = ' + fs.readFileSync(options.funcFile, \"utf-8\"));\n    }\n\n    for (var i = 0; i < options.paths.length; i++) {\n        if (options.async) {\n            replacizeFile(options.paths[i]);\n        }\n        else {\n            replacizeFileSync(options.paths[i]);\n        }\n    }\n\n    function canSearch(file, isFile) {\n      var inIncludes = includes && includes.some(function(include) {\n          return minimatch(file, include, { matchBase: true });\n      })\n      var inExcludes = excludes.some(function(exclude) {\n          return minimatch(file, exclude, { matchBase: true });\n      })\n\n      return ((!includes || !isFile || inIncludes) && (!excludes || !inExcludes));\n    }\n\n    function replacizeFile(file) {\n      fs.lstat(file, function(err, stats) {\n          if (err) throw err;\n\n          if (stats.isSymbolicLink()) {\n              // don't follow symbolic links for now\n              return;\n          }\n          var isFile = stats.isFile();\n          if (!canSearch(file, isFile)) {\n              return;\n          }\n          if (isFile) {\n              fs.readFile(file, \"utf-8\", function(err, text) {\n                  if (err) {\n                      if (err.code == 'EMFILE') {\n                          console.log('Too many files, try running `replace` without --async');\n                          process.exit(1);\n                      }\n                      throw err;\n                  }\n\n                  text = replacizeText(text, file);\n                  if (canReplace && text !== null) {\n                      fs.writeFile(file, text, function(err) {\n                          if (err) throw err;\n                      });\n                  }\n              });\n          }\n          else if (stats.isDirectory() && options.recursive) {\n              fs.readdir(file, function(err, files) {\n                  if (err) throw err;\n                  for (var i = 0; i < files.length; i++) {\n                      replacizeFile(path.join(file, files[i]));\n                  }\n              });\n          }\n       });\n    }\n\n    function replacizeFileSync(file) {\n      var stats = fs.lstatSync(file);\n      if (stats.isSymbolicLink()) {\n          // don't follow symbolic links for now\n          return;\n      }\n      var isFile = stats.isFile();\n      if (!canSearch(file, isFile)) {\n          return;\n      }\n      if (isFile) {\n          var text = fs.readFileSync(file, \"utf-8\");\n\n          text = replacizeText(text, file);\n          if (canReplace && text !== null) {\n              fs.writeFileSync(file, text);\n          }\n      }\n      else if (stats.isDirectory() && options.recursive) {\n          var files = fs.readdirSync(file);\n          for (var i = 0; i < files.length; i++) {\n              replacizeFileSync(path.join(file, files[i]));\n          }\n      }\n    }\n\n    function replacizeText(text, file) {\n        var match = text.match(regex);\n        if (!match) {\n            return null;\n        }\n\n        if (!options.silent) {\n            var printout = file[options.fileColor] || file;\n            if (options.count) {\n                printout += (\" (\" + match.length + \")\").grey;\n            }\n            console.log(printout);\n        }\n        if (!options.silent && !options.quiet\n           && !(lineCount > options.maxLines)\n           && options.multiline) {\n            var lines = text.split(\"\\n\");\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                if (line.match(regex)) {\n                    if (++lineCount > options.maxLines) {\n                        break;\n                    }\n                    var replacement = options.replacement || \"$&\";\n                    line = line.replace(regex, replaceFunc || replacement[options.color]);\n                    console.log(\" \" + (i + 1) + \": \" + line.slice(0, limit));\n                }\n            }\n        }\n        if (canReplace) {\n            return text.replace(regex, replaceFunc || options.replacement);\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-replace/node_modules/replace/bin/shared-options.js":"var path = require(\"path\");\n\nmodule.exports = {\n    regex: {\n        position: 0,\n        help: \"JavaScript regex for searching file e.g. '\\\\d+'\",\n        required: true\n    },\n    paths: {\n        position: 1,\n        help: \"File or directory to search (default is '*')\",\n        list: true,\n        type: \"string\",\n        default: [\"*\"]\n    },\n    recursive: {\n        abbr: 'r',\n        flag: true,\n        help: \"Recursively search directories\"\n    },\n    ignoreCase: {\n        abbr: 'i',\n        flag: true,\n        help: \"Ignore case when searching\"\n    },\n    multiline: {\n        abbr: 'm',\n        flag: true,\n        help: \"Match line by line, default is true\",\n        default: true\n    },\n    include: {\n        string: '--include=PATHS',\n        help: \"Only search in these files, e.g. '*.js,*.foo'\"\n    },\n    exclude: {\n        string: '--exclude=PATHS',\n        help: \"Don't search in these files, e.g. '*.min.js'\"\n    },\n    excludeList: {\n        full: 'exclude-list',\n        metavar: 'FILE',\n        help: \"File containing a new-line separated list of files to ignore\",\n        default: path.join(__dirname, \"..\", \"defaultignore\"),\n        hidden: true\n    },\n    maxLines: {\n        string: '-n NUMLINES',\n        help: 'limit the number of lines to preview'\n    },\n    count: {\n        abbr: 'c',\n        flag: true,\n        help: 'display count of occurances in each file'\n    },\n    quiet: {\n        abbr: 'q',\n        flag: true,\n        help: \"Just print the names of the files matches occured in (faster)\"\n    },\n    color: {\n        metavar: 'COLOR',\n        help: \"highlight color, e.g. 'green' or 'blue'\",\n        choices: ['red', 'green', 'blue', 'cyan', 'yellow', 'magenta', 'bold', 'italic'],\n        default: 'cyan'\n    },\n    fileColor: {\n        help: \"highlight matching file's name in color, e.g. 'green' or 'blue'\",\n        choices: ['red', 'green', 'blue', 'cyan', 'yellow', 'magenta', 'bold', 'italic'],\n        default: 'yellow'\n    },\n    async: {\n        abbr: 'a',\n        flag: true,\n        help: \"asynchronously read/write files in directory (faster)\",\n        hidden: true\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-replace/node_modules/replace/testfunc.js":"function(match) {\n   return match.toLowerCase();\n}"}